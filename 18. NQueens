public class NQueens {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> n_boards = new ArrayList<>();
        solveNQueens(new ArrayList<>(), 0, n, n_boards);
        return n_boards;
    }
    
    private void solveNQueens(List<Integer> col, int row, int n, List<List<String>> n_boards){
        
        if(row==n){
            if(col.size()==n)
                n_boards.add(fillBoard(col, n));
            return;
        }
        else
        {
            for(int i=0;i<n;i++){
                col.add(i);
                if(isValid(col))
                    solveNQueens(col, row+1, n, n_boards);
                col.remove(col.size()-1);
            }
        }
    }
    
    private List<String> fillBoard(List<Integer> col, int n){
        List<String> board = new ArrayList<>();
        
        for(int i = 0;i<n;i++){
            String row = "";
            int c = col.get(i);
            for(int j=0;j<n;j++){
                if(j==c)
                    row+="Q";
                else
                    row+=".";
            }
            board.add(row);
        }
        
        return board;
    }
    
    private void columnSet(List<List<Integer>>colSet, int n){
        for(int i=0;i<n;i++){
            List <Integer> col = new ArrayList<>();
            col.add(i);
            colSet.add(col);
        }
    }
    
    private boolean isValid(List<Integer> col){
        int r = col.size()-1;
        int c = col.get(r);
        for(int i = 0;i<r;i++){
            int d = Math.abs(col.get(i)-c);//for 0 column exists
            if(d==0 || d==Math.abs(i-r)) // for i-r diagonal exists
                return false;
        }
        return true;
    }
}
