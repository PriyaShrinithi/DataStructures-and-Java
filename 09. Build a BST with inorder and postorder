/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class BuildTree 
{
    public TreeNode buildTree(int[] inorder, int[] postorder)
    {  
        if(postorder.length==0||inorder.length==0||inorder==null||postorder==null)
            return null;
    
        return buildTree(inorder, postorder, postorder.length-1, 0, inorder.length);
    }
    
    
    
    private TreeNode buildTree(int [] inorder, int [] postorder, int index, int start, int end)
    {  
        if(index<0)
            return null;
        
        int mid = 0;
        for(int i = start;i<end;i++)
        {
            if(inorder[i]==postorder[index])
            {
                mid = i;
                break;
            }
        }
        
        TreeNode root = new TreeNode(postorder[index]);
        
        int leftEnd = mid;
        int rightStart  = mid+1;
        
        if(leftEnd - start > 0)
            root.left = buildTree(inorder, postorder, index - (end - rightStart)-1, start, leftEnd);
        
        if(end-rightStart > 0)
            root.right = buildTree(inorder, postorder, index-1, rightStart, end);
    
        return root;
        
    }
    
}
